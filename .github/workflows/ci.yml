name: Test

on:
  push:
    branches: [ main ]
    paths:
      - "cnceye/**"
      - "tests/**"
  pull_request:
  workflow_dispatch:

jobs:
  lines:
    name: Less than 1000 lines
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Install SLOCCount
      run: sudo apt-get install sloccount
    - name: Check <1000 lines
      run: sloccount cnceye tests; if [ $(sloccount cnceye | sed -n 's/.*Total Physical Source Lines of Code (SLOC)[ ]*= \([^ ]*\).*/\1/p' | tr -d ',') -gt 1000 ]; then exit 1; fi

  ci:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
        poetry-version: ["1.5.1"]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Install the project dependencies
        run: poetry install

      - name: Format with black
        run: |
          poetry run black --check cnceye tests

      - name: Lint with ruff
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run ruff --output-format=github --select=E9,F63,F7,F82 --target-version=py37 .
          # default set of ruff rules with GitHub Annotations
          poetry run ruff --output-format=github --target-version=py37 .

      - name: Run the automated tests
        run: poetry run pytest -v --cov=cnceye tests

  blender:
    name: Blender
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Install Blender

      run:  sudo snap install blender --classic

    - name: Install libegl1
    # https://stackoverflow.com/a/76272504/13743156
      run: sudo apt update -y && sudo apt-get install libegl1

    - name: Check blender version
      run: blender --version

    - name: Run Blender
      run:  |
          mkdir output
          cp blender/measure.blend ./output
          blender "output/measure.blend" --background --python scripts/test.py -- tests/fixtures/gcode/edge.gcode
